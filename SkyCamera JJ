#include <Arduino.h>

// Define pins for the KY-040 rotary encoders
const int encoderPinA1 = 2;  // CLK or DT pin for encoder 1
const int encoderPinB1 = 3;  // DT or CLK pin for encoder 1
const int encoderPinA2 = 4;  // CLK or DT pin for encoder 2
const int encoderPinB2 = 5;  // DT or CLK pin for encoder 2
const int encoderPinA3 = 6;  // CLK or DT pin for encoder 3
const int encoderPinB3 = 7;  // DT or CLK pin for encoder 3
const int encoderPinA4 = 8;  // CLK or DT pin for encoder 4
const int encoderPinB4 = 9;  // DT or CLK pin for encoder 4

// Motor control pins for L298N motor controller 1
const int motor1Pin1 = 10;    // Motor 1 control pin 1
const int motor1Pin2 = 11;    // Motor 1 control pin 2
const int motor2Pin1 = 12;    // Motor 2 control pin 1
const int motor2Pin2 = 13;    // Motor 2 control pin 2

// Motor control pins for L298N motor controller 2
const int motor3Pin1 = A0;    // Motor 3 control pin 1
const int motor3Pin2 = A1;    // Motor 3 control pin 2
const int motor4Pin1 = A2;    // Motor 4 control pin 1
const int motor4Pin2 = A3;    // Motor 4 control pin 2

// Variables to keep track of encoder counts and calculate distance
volatile long encoderCounts1 = 0;
volatile long encoderCounts2 = 0;
volatile long encoderCounts3 = 0;
volatile long encoderCounts4 = 0;
float distancePerCount = 0.01; // Distance per encoder count (adjust based on your setup)

//Variables that will be the user inputed coordinates
const double x = 1;
const double y = 1;
const double z = 1;
//Variables that turn the given coordiantes into inches to move the cables
const double Z = sqrt(sq(z*12)+sq(69.9671));
const double A = sqrt(sq(x*12)+sq(120-(y*12)))+Z;
const double B = sqrt(sq(72-(x*12))+sq(120-(y*12)))+Z;
const double C = sqrt(sq(x*12)+sq(y*12))+Z;
const double D = sqrt(sq(72-(x*12))+sq(y*12))+Z;
  
// Array to store sets of desired coordinates BASE LOGIC
//Maybe for ease of finding Z height move to middle of field first???
//Move to X and Y position in one move might be easier???
const float targetCoordinates[][4] = {
// Motor Location {A,B,C,D}
// A--------B
// ----------
// C--------D
  {Z, Z, Z, Z},   // Lift Set 1
  {A, B, C, D},   // Move to X and Y position in one go
//{Y1, Y2, Y1, Y2},   // MoveSety 1
//  {2, 2, 1, 1},   // AngleSet 1
  /*{0, 0, 0, 0},   // LowerSet 1
  {44.4, 44.4, 44.4, 44.4}    // Lift Set 2
{1, 1, 1, 1},   // MoveSetx 2
{1, 1, 1, 1},   // MoveSety 2
{2, 2, 1, 1},   // AngleSet 2
//{0, 0, 0, 0},   // LowerSet 2
{19.2, 19.2, 19.2, 19.2}    // Lift Set 3
{1, 1, 1, 1},   // MoveSetx 3
{1, 1, 1, 1},   // MoveSety 3
{2, 2, 1, 1},   // AngleSet 3
//{0, 0, 0, 0},   // LowerSet 3 */
};

// Function to move motors to the desired coordinates
void moveToCoordinates(const float coordinates[]) {
  for (int i = 0; i < 4; i++) {
    if (encoderCounts1 >= coordinates[i]) {
      digitalWrite(motor1Pin1, HIGH);
      digitalWrite(motor1Pin2, LOW);
    } else {
      digitalWrite(motor1Pin1, LOW);
      digitalWrite(motor1Pin2, LOW);
    }
    
    if (encoderCounts2 >= coordinates[i]) {
      digitalWrite(motor2Pin1, HIGH);
      digitalWrite(motor2Pin2, LOW);
    } else {
      digitalWrite(motor2Pin1, LOW);
      digitalWrite(motor2Pin2, LOW);
    }
    
    if (encoderCounts3 >= coordinates[i]) {
      digitalWrite(motor3Pin1, HIGH);
      digitalWrite(motor3Pin2, LOW);
    } else {
      digitalWrite(motor3Pin1, LOW);
      digitalWrite(motor3Pin2, LOW);
    }
    
    if (encoderCounts4 >= coordinates[i]) {
      digitalWrite(motor4Pin1, HIGH);
      digitalWrite(motor4Pin2, LOW);
    } else {
      digitalWrite(motor4Pin1, LOW);
      digitalWrite(motor4Pin2, LOW);
    }
    
    // Add a delay here if needed for the motors to reach their positions
    delay(1000); // Example delay of 1 second
  }
}

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  
  // Set encoder pins as inputs with internal pullup resistors
  pinMode(encoderPinA1, INPUT_PULLUP);
  pinMode(encoderPinB1, INPUT_PULLUP);
  pinMode(encoderPinA2, INPUT_PULLUP);
  pinMode(encoderPinB2, INPUT_PULLUP);
  pinMode(encoderPinA3, INPUT_PULLUP);
  pinMode(encoderPinB3, INPUT_PULLUP);
  pinMode(encoderPinA4, INPUT_PULLUP);
  pinMode(encoderPinB4, INPUT_PULLUP);
  
  // Set motor control pins as outputs
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(motor3Pin1, OUTPUT);
  pinMode(motor3Pin2, OUTPUT);
  pinMode(motor4Pin1, OUTPUT);
  pinMode(motor4Pin2, OUTPUT);
  
  // Attach interrupts to encoder pins
  attachInterrupt(digitalPinToInterrupt(encoderPinA1), updateEncoder1, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderPinA2), updateEncoder2, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderPinA3), updateEncoder3, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderPinA4), updateEncoder4, CHANGE);
}

void loop() {
  // Loop through each set of desired coordinates
  for (int i = 0; i < sizeof(targetCoordinates) / sizeof(targetCoordinates[0]); i++) {
    // Calculate distance traveled for each encoder
    float distance1 = encoderCounts1 * distancePerCount;
    float distance2 = encoderCounts2 * distancePerCount;
    float distance3 = encoderCounts3 * distancePerCount;
    float distance4 = encoderCounts4 * distancePerCount;
  
    // Print distances to serial monitor
    Serial.print("Distance Encoder 1: ");
    Serial.print(distance1);
    Serial.println(" inches");
  
    Serial.print("Distance Encoder 2: ");
    Serial.print(distance2);
    Serial.println(" inches");
  
    Serial.print("Distance Encoder 3: ");
    Serial.print(distance3);
    Serial.println(" inches");

    Serial.print("Distance Encoder 4: ");
    Serial.print(distance4);
    Serial.println(" inches");

    // Move motors to the current set of coordinates
    moveToCoordinates(targetCoordinates[i]);
  }
}

// Interrupt service routine to update encoder count for encoder 1
void updateEncoder1() {
  static int previousState = LOW;
  int currentState = digitalRead(encoderPinB1);
  
  if (currentState != previousState) {
    if (digitalRead(encoderPinA1) != currentState) {
      encoderCounts1++;
    } else {
      encoderCounts1--;
    }
  }
  
  previousState = currentState;
}

// Interrupt service routine to update encoder count for encoder 2
void updateEncoder2() {
  static int previousState = LOW;
  int currentState = digitalRead(encoderPinB2);
  
  if (currentState != previousState) {
    if (digitalRead(encoderPinA2) != currentState) {
      encoderCounts2++;
    } else {
      encoderCounts2--;
    }
  }
  
  previousState = currentState;
}

// Interrupt service routine to update encoder count for encoder 3
void updateEncoder3() {
  static int previousState = LOW;
  int currentState = digitalRead(encoderPinB3);
  
  if (currentState != previousState) {
    if (digitalRead(encoderPinA3) != currentState) {
      encoderCounts3++;
    } else {
      encoderCounts3--;
    }
  }
  
  previousState = currentState;
}

// Interrupt service routine to update encoder count for encoder 4
void updateEncoder4() {
  static int previousState = LOW;
  int currentState = digitalRead(encoderPinB4);
  
  if (currentState != previousState) {
    if (digitalRead(encoderPinA4) != currentState) {
      encoderCounts4++;
    } else {
      encoderCounts4--;
    }
  }
  
  previousState = currentState;
}
